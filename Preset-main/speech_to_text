import 'package:avatar_glow/avatar_glow.dart';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:highlight_text/highlight_text.dart';
import 'package:speech_to_text/speech_to_text.dart'as stt;

class Speech extends StatefulWidget {
  const Speech({Key? key}) : super(key: key);

  @override
  _SpeechState createState() => _SpeechState();
}

class _SpeechState extends State<Speech> {
  late  stt.SpeechToText _speechToText;
  bool _isListening=false;
  String text='Press the button to start speaking';
  double confidence=1.0;
  @override
  void initState() {
    // TODO: implement initState
    _speechToText=stt.SpeechToText();
    super.initState();
  }
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        centerTitle: true,
        title: Text(_isListening?'Listening....':'Tap to Start',style: TextStyle(color: Colors.white,fontWeight: FontWeight.bold,fontSize: 30,),),
        backgroundColor: Colors.teal,
      ),
      floatingActionButtonLocation: FloatingActionButtonLocation.centerFloat,
      floatingActionButton: AvatarGlow(
          animate: _isListening,
          glowColor: Colors.teal,
          duration: const Duration(milliseconds: 2000),
          repeatPauseDuration: const Duration(milliseconds: 100),
          repeat: true,
          child: FloatingActionButton(
            backgroundColor: Colors.teal,
        splashColor: Colors.transparent,
        onPressed: _listen,
        child: Icon(_isListening?Icons.mic:Icons.mic_none),
      ), endRadius: 75.0),

      body: SingleChildScrollView(
        reverse: true,
        child: Container(
          child: Text(text,style: TextStyle(color: Colors.teal,fontSize: 30,fontWeight: FontWeight.bold),),
        ),
      ),
    );
  }
  void _listen() async {
    if (!_isListening) {
      bool available = await _speechToText.initialize(
        onStatus: (val) => print('onStatus: $val'),
        onError: (val) => print('onError: $val'),
      );
      if (available) {
        setState(() => _isListening = true);
        _speechToText.listen(
          onResult: (val) => setState(() {
            text = val.recognizedWords;
            print(text);
            if (val.hasConfidenceRating && val.confidence > 0) {
              confidence = val.confidence;
            }
          }),
        );
      }
    } else {
      setState(() => _isListening = false);
      _speechToText.stop();
    }
  }

}


